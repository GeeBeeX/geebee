####################################################################
#   Original Ubuntu default bashrc (clean this up as necessary)

# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

####################################################################
#   prompt stuff stolen from cjs

#   Variables used by the prompt. These avoid running the commands every time
#   we print the prompt, for slight efficiency gain. We never export them
#   because other processes should do their own checks on their environment.
__cjs_prompt_user="$(id -u -n)"
#   We consider ourselves to be "containerized" if our root process
#   does not have the word "init" in its path.
__cjs_prompt_container=
[[ -e /proc/1/cmdline ]] && {
    case $(tr '\000' ' ' < /proc/1/cmdline) in
        */systemd\ --system*)       ;;
        *init*)                     ;;
        *)                          __cjs_prompt_container=1;;
    esac
}

__cjs_prompt() {
    local exitcode="$?"

    #   \001…\002 tells readline not to count these as printing chars.
    #   This can be done as \[…\] in some circumstances, but not all.
    #   See: https://stackoverflow.com/q/24839271/107294
    local      bold=$'\001\E[01m\002'
    local underline=$'\001\E[01m\002'
    local       inv=$'\001\E[07m\002'
    local       red=$'\001\E[31m\002'
    local     green=$'\001\E[32m\002'
    local    yellow=$'\001\E[33m\002'
    local      blue=$'\001\E[34m\002'
    local  bgyellow=$'\001\E[43m\002'
    local   bgwhite=$'\001\E[47m\002'
    local   boldred=$'\001\E[1;31m\002'
    local      none=$'\001\E[m\002'         # At end so `declare -f` looks ok
    #   Above is mostly documentation for further use elsewhere;
    #   we should probably extract it.
    local    pcolor="$blue$bold"

    local exitprint
    case "$exitcode" in
        0) exitprint='' ;;
        *) exitprint="${red}${exitcode}${none} ";;
    esac

    local pp=''                                         # prompt prefix for:
    [[ -n $__cjs_prompt_container ]] && pp="${pp}c"     # - in container
    [[ -n $STY ]] && pp="${pp}s"                        # - screeen

    if [[ $EUID -eq 0 ]]; then
        echo "$exitprint$pcolor$pp#$none "
    elif [[ $__cjs_prompt_user =~ ^(geebee|cjs|curt|c?samp) ]]; then
        echo "$exitprint$pcolor$pp\$$none "
    else
        echo "$__cjs_prompt_user $exitprint$pcolor$pp\$$none "
    fi
}
PS1='$(__cjs_prompt)'

####################################################################
#   geebee bashrc

#   Python multi-version installation manager
#   XXX .pythonz/etc/bashrc sets a whole pile of vars we should make local
[[ -s ~/.pythonz/etc/bashrc ]] && . ~/.pythonz/etc/bashrc
pz() { pythonz "$@"; }
